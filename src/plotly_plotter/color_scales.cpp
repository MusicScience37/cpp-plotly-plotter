/*
 * Copyright 2025 MusicScience37 (Kenta Kabashima)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * \file
 * \brief Implementation of functions of color scales.
 *
 * This file is generated from a template
 * scripts/templates/color_scales.h.jinja
 * using a script scripts/color_scale_util.py.
 */
#include "plotly_plotter/color_scales.h"

namespace plotly_plotter::color_scales {

std::vector<std::pair<double, std::string>> gray() {
    return {
        {0.0, "#000000"},  // NOLINT(*-magic-numbers)
        {0.1, "#030303"},  // NOLINT(*-magic-numbers)
        {0.2, "#161616"},  // NOLINT(*-magic-numbers)
        {0.3, "#2E2E2E"},  // NOLINT(*-magic-numbers)
        {0.4, "#484848"},  // NOLINT(*-magic-numbers)
        {0.5, "#636363"},  // NOLINT(*-magic-numbers)
        {0.6, "#808080"},  // NOLINT(*-magic-numbers)
        {0.7, "#9E9E9E"},  // NOLINT(*-magic-numbers)
        {0.8, "#BEBEBD"},  // NOLINT(*-magic-numbers)
        {0.9, "#DEDEDE"},  // NOLINT(*-magic-numbers)
        {1.0, "#FFFFFF"},  // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> inverted_gray() {
    return {
        {0.0, "#FFFFFF"},  // NOLINT(*-magic-numbers)
        {0.1, "#DEDEDE"},  // NOLINT(*-magic-numbers)
        {0.2, "#BEBEBD"},  // NOLINT(*-magic-numbers)
        {0.3, "#9E9E9E"},  // NOLINT(*-magic-numbers)
        {0.4, "#808080"},  // NOLINT(*-magic-numbers)
        {0.5, "#636363"},  // NOLINT(*-magic-numbers)
        {0.6, "#484848"},  // NOLINT(*-magic-numbers)
        {0.7, "#2E2E2E"},  // NOLINT(*-magic-numbers)
        {0.8, "#161616"},  // NOLINT(*-magic-numbers)
        {0.9, "#030303"},  // NOLINT(*-magic-numbers)
        {1.0, "#000000"},  // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> cool_warm_simple() {
    return {
        {0.0, "#4D5AD7"},   // NOLINT(*-magic-numbers)
        {0.05, "#5C6CDD"},  // NOLINT(*-magic-numbers)
        {0.1, "#6B7DE2"},   // NOLINT(*-magic-numbers)
        {0.15, "#7C8EE7"},  // NOLINT(*-magic-numbers)
        {0.2, "#8D9EEB"},   // NOLINT(*-magic-numbers)
        {0.25, "#9FAFF0"},  // NOLINT(*-magic-numbers)
        {0.3, "#B1BFF3"},   // NOLINT(*-magic-numbers)
        {0.35, "#C4CFF7"},  // NOLINT(*-magic-numbers)
        {0.4, "#D8DFFA"},   // NOLINT(*-magic-numbers)
        {0.45, "#EBEFFD"},  // NOLINT(*-magic-numbers)
        {0.5, "#FFFFFF"},   // NOLINT(*-magic-numbers)
        {0.55, "#FCEBEB"},  // NOLINT(*-magic-numbers)
        {0.6, "#F9D7D6"},   // NOLINT(*-magic-numbers)
        {0.65, "#F4C2C3"},  // NOLINT(*-magic-numbers)
        {0.7, "#EFAEAF"},   // NOLINT(*-magic-numbers)
        {0.75, "#E99A9C"},  // NOLINT(*-magic-numbers)
        {0.8, "#E28689"},   // NOLINT(*-magic-numbers)
        {0.85, "#DB7176"},  // NOLINT(*-magic-numbers)
        {0.9, "#D35B64"},   // NOLINT(*-magic-numbers)
        {0.95, "#CA4352"},  // NOLINT(*-magic-numbers)
        {1.0, "#C12440"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> cool_warm_darker() {
    return {
        {0.0, "#323C91"},   // NOLINT(*-magic-numbers)
        {0.05, "#3F49B1"},  // NOLINT(*-magic-numbers)
        {0.1, "#4B58D2"},   // NOLINT(*-magic-numbers)
        {0.15, "#5D6DDD"},  // NOLINT(*-magic-numbers)
        {0.2, "#7183E4"},   // NOLINT(*-magic-numbers)
        {0.25, "#8798EA"},  // NOLINT(*-magic-numbers)
        {0.3, "#9DADEF"},   // NOLINT(*-magic-numbers)
        {0.35, "#B5C2F4"},  // NOLINT(*-magic-numbers)
        {0.4, "#CDD6F8"},   // NOLINT(*-magic-numbers)
        {0.45, "#E6EAFC"},  // NOLINT(*-magic-numbers)
        {0.5, "#FFFFFF"},   // NOLINT(*-magic-numbers)
        {0.55, "#FBE5E5"},  // NOLINT(*-magic-numbers)
        {0.6, "#F6CBCB"},   // NOLINT(*-magic-numbers)
        {0.65, "#F0B2B2"},  // NOLINT(*-magic-numbers)
        {0.7, "#E8989A"},   // NOLINT(*-magic-numbers)
        {0.75, "#E07E82"},  // NOLINT(*-magic-numbers)
        {0.8, "#D6626A"},   // NOLINT(*-magic-numbers)
        {0.85, "#CB4453"},  // NOLINT(*-magic-numbers)
        {0.9, "#BC233E"},   // NOLINT(*-magic-numbers)
        {0.95, "#9F1E34"},  // NOLINT(*-magic-numbers)
        {1.0, "#821829"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> cool_warm_extended() {
    return {
        {0.0, "#293085"},    // NOLINT(*-magic-numbers)
        {0.025, "#303893"},  // NOLINT(*-magic-numbers)
        {0.05, "#3740A1"},   // NOLINT(*-magic-numbers)
        {0.075, "#3E48AF"},  // NOLINT(*-magic-numbers)
        {0.1, "#4551BE"},    // NOLINT(*-magic-numbers)
        {0.125, "#4C59CD"},  // NOLINT(*-magic-numbers)
        {0.15, "#4E67D2"},   // NOLINT(*-magic-numbers)
        {0.175, "#4C77D3"},  // NOLINT(*-magic-numbers)
        {0.2, "#4B86D3"},    // NOLINT(*-magic-numbers)
        {0.225, "#4994D4"},  // NOLINT(*-magic-numbers)
        {0.25, "#46A3D3"},   // NOLINT(*-magic-numbers)
        {0.275, "#4AB0D4"},  // NOLINT(*-magic-numbers)
        {0.3, "#59BBD7"},    // NOLINT(*-magic-numbers)
        {0.325, "#67C6DA"},  // NOLINT(*-magic-numbers)
        {0.35, "#79D0DE"},   // NOLINT(*-magic-numbers)
        {0.375, "#92D8E4"},  // NOLINT(*-magic-numbers)
        {0.4, "#A9E0E9"},    // NOLINT(*-magic-numbers)
        {0.425, "#BFE8EF"},  // NOLINT(*-magic-numbers)
        {0.45, "#D5F0F4"},   // NOLINT(*-magic-numbers)
        {0.475, "#EAF7FA"},  // NOLINT(*-magic-numbers)
        {0.5, "#FFFFFF"},    // NOLINT(*-magic-numbers)
        {0.525, "#FAF3EA"},  // NOLINT(*-magic-numbers)
        {0.55, "#F5E8D5"},   // NOLINT(*-magic-numbers)
        {0.575, "#F0DCC0"},  // NOLINT(*-magic-numbers)
        {0.6, "#EBD0AB"},    // NOLINT(*-magic-numbers)
        {0.625, "#E6C596"},  // NOLINT(*-magic-numbers)
        {0.65, "#E1B980"},   // NOLINT(*-magic-numbers)
        {0.675, "#DCAC72"},  // NOLINT(*-magic-numbers)
        {0.7, "#D89E66"},    // NOLINT(*-magic-numbers)
        {0.725, "#D3915A"},  // NOLINT(*-magic-numbers)
        {0.75, "#D08256"},   // NOLINT(*-magic-numbers)
        {0.775, "#CC7256"},  // NOLINT(*-magic-numbers)
        {0.8, "#C86255"},    // NOLINT(*-magic-numbers)
        {0.825, "#C45054"},  // NOLINT(*-magic-numbers)
        {0.85, "#BF3C53"},   // NOLINT(*-magic-numbers)
        {0.875, "#B7294F"},  // NOLINT(*-magic-numbers)
        {0.9, "#A92348"},    // NOLINT(*-magic-numbers)
        {0.925, "#9C1C40"},  // NOLINT(*-magic-numbers)
        {0.95, "#8E1439"},   // NOLINT(*-magic-numbers)
        {0.975, "#810D32"},  // NOLINT(*-magic-numbers)
        {1.0, "#74052B"},    // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> cool_warm_extended_relaxed() {
    return {
        {0.0, "#293085"},    // NOLINT(*-magic-numbers)
        {0.025, "#303893"},  // NOLINT(*-magic-numbers)
        {0.05, "#3740A1"},   // NOLINT(*-magic-numbers)
        {0.075, "#3E48AF"},  // NOLINT(*-magic-numbers)
        {0.1, "#4551BE"},    // NOLINT(*-magic-numbers)
        {0.125, "#4C59CD"},  // NOLINT(*-magic-numbers)
        {0.15, "#4E67D2"},   // NOLINT(*-magic-numbers)
        {0.175, "#4C77D3"},  // NOLINT(*-magic-numbers)
        {0.2, "#4B86D3"},    // NOLINT(*-magic-numbers)
        {0.225, "#4994D4"},  // NOLINT(*-magic-numbers)
        {0.25, "#46A3D3"},   // NOLINT(*-magic-numbers)
        {0.275, "#4AB0D4"},  // NOLINT(*-magic-numbers)
        {0.3, "#59BBD7"},    // NOLINT(*-magic-numbers)
        {0.325, "#67C6DA"},  // NOLINT(*-magic-numbers)
        {0.35, "#78D0DD"},   // NOLINT(*-magic-numbers)
        {0.375, "#91D7DE"},  // NOLINT(*-magic-numbers)
        {0.4, "#A7DFE0"},    // NOLINT(*-magic-numbers)
        {0.425, "#BDE6E1"},  // NOLINT(*-magic-numbers)
        {0.45, "#D1EDE2"},   // NOLINT(*-magic-numbers)
        {0.475, "#E6F4E3"},  // NOLINT(*-magic-numbers)
        {0.5, "#FAFAE3"},    // NOLINT(*-magic-numbers)
        {0.525, "#F6EFD3"},  // NOLINT(*-magic-numbers)
        {0.55, "#F2E4C2"},   // NOLINT(*-magic-numbers)
        {0.575, "#EED9B1"},  // NOLINT(*-magic-numbers)
        {0.6, "#EACFA1"},    // NOLINT(*-magic-numbers)
        {0.625, "#E5C490"},  // NOLINT(*-magic-numbers)
        {0.65, "#E1B97F"},   // NOLINT(*-magic-numbers)
        {0.675, "#DCAC72"},  // NOLINT(*-magic-numbers)
        {0.7, "#D89E66"},    // NOLINT(*-magic-numbers)
        {0.725, "#D3915A"},  // NOLINT(*-magic-numbers)
        {0.75, "#D08256"},   // NOLINT(*-magic-numbers)
        {0.775, "#CC7256"},  // NOLINT(*-magic-numbers)
        {0.8, "#C86255"},    // NOLINT(*-magic-numbers)
        {0.825, "#C45054"},  // NOLINT(*-magic-numbers)
        {0.85, "#BF3C53"},   // NOLINT(*-magic-numbers)
        {0.875, "#B7294F"},  // NOLINT(*-magic-numbers)
        {0.9, "#A92348"},    // NOLINT(*-magic-numbers)
        {0.925, "#9C1C40"},  // NOLINT(*-magic-numbers)
        {0.95, "#8E1439"},   // NOLINT(*-magic-numbers)
        {0.975, "#810D32"},  // NOLINT(*-magic-numbers)
        {1.0, "#74052B"},    // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> cool_extended() {
    return {
        {0.0, "#293085"},   // NOLINT(*-magic-numbers)
        {0.05, "#303893"},  // NOLINT(*-magic-numbers)
        {0.1, "#3740A1"},   // NOLINT(*-magic-numbers)
        {0.15, "#3E48AF"},  // NOLINT(*-magic-numbers)
        {0.2, "#4551BE"},   // NOLINT(*-magic-numbers)
        {0.25, "#4C59CD"},  // NOLINT(*-magic-numbers)
        {0.3, "#4E67D2"},   // NOLINT(*-magic-numbers)
        {0.35, "#4C77D3"},  // NOLINT(*-magic-numbers)
        {0.4, "#4B86D3"},   // NOLINT(*-magic-numbers)
        {0.45, "#4994D4"},  // NOLINT(*-magic-numbers)
        {0.5, "#46A3D3"},   // NOLINT(*-magic-numbers)
        {0.55, "#4AB0D4"},  // NOLINT(*-magic-numbers)
        {0.6, "#59BBD7"},   // NOLINT(*-magic-numbers)
        {0.65, "#67C6DA"},  // NOLINT(*-magic-numbers)
        {0.7, "#79D0DE"},   // NOLINT(*-magic-numbers)
        {0.75, "#92D8E4"},  // NOLINT(*-magic-numbers)
        {0.8, "#A9E0E9"},   // NOLINT(*-magic-numbers)
        {0.85, "#BFE8EF"},  // NOLINT(*-magic-numbers)
        {0.9, "#D5F0F4"},   // NOLINT(*-magic-numbers)
        {0.95, "#EAF7FA"},  // NOLINT(*-magic-numbers)
        {1.0, "#FFFFFF"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> warm_extended() {
    return {
        {0.0, "#FFFFFF"},   // NOLINT(*-magic-numbers)
        {0.05, "#FAF3EA"},  // NOLINT(*-magic-numbers)
        {0.1, "#F5E8D5"},   // NOLINT(*-magic-numbers)
        {0.15, "#F0DCC0"},  // NOLINT(*-magic-numbers)
        {0.2, "#EBD0AB"},   // NOLINT(*-magic-numbers)
        {0.25, "#E6C596"},  // NOLINT(*-magic-numbers)
        {0.3, "#E1B980"},   // NOLINT(*-magic-numbers)
        {0.35, "#DCAC72"},  // NOLINT(*-magic-numbers)
        {0.4, "#D89E66"},   // NOLINT(*-magic-numbers)
        {0.45, "#D3915A"},  // NOLINT(*-magic-numbers)
        {0.5, "#D08256"},   // NOLINT(*-magic-numbers)
        {0.55, "#CC7256"},  // NOLINT(*-magic-numbers)
        {0.6, "#C86255"},   // NOLINT(*-magic-numbers)
        {0.65, "#C45054"},  // NOLINT(*-magic-numbers)
        {0.7, "#BF3C53"},   // NOLINT(*-magic-numbers)
        {0.75, "#B7294F"},  // NOLINT(*-magic-numbers)
        {0.8, "#A92348"},   // NOLINT(*-magic-numbers)
        {0.85, "#9C1C40"},  // NOLINT(*-magic-numbers)
        {0.9, "#8E1439"},   // NOLINT(*-magic-numbers)
        {0.95, "#810D32"},  // NOLINT(*-magic-numbers)
        {1.0, "#74052B"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> blown() {
    return {
        {0.0, "#FFFFFF"},   // NOLINT(*-magic-numbers)
        {0.05, "#FFEFE9"},  // NOLINT(*-magic-numbers)
        {0.1, "#FFDED3"},   // NOLINT(*-magic-numbers)
        {0.15, "#FECDBD"},  // NOLINT(*-magic-numbers)
        {0.2, "#FCBDA7"},   // NOLINT(*-magic-numbers)
        {0.25, "#FAAC91"},  // NOLINT(*-magic-numbers)
        {0.3, "#F79B7B"},   // NOLINT(*-magic-numbers)
        {0.35, "#F38964"},  // NOLINT(*-magic-numbers)
        {0.4, "#EF774C"},   // NOLINT(*-magic-numbers)
        {0.45, "#EA6331"},  // NOLINT(*-magic-numbers)
        {0.5, "#D95B2B"},   // NOLINT(*-magic-numbers)
        {0.55, "#C85327"},  // NOLINT(*-magic-numbers)
        {0.6, "#B74C23"},   // NOLINT(*-magic-numbers)
        {0.65, "#A64420"},  // NOLINT(*-magic-numbers)
        {0.7, "#953D1C"},   // NOLINT(*-magic-numbers)
        {0.75, "#853618"},  // NOLINT(*-magic-numbers)
        {0.8, "#752F15"},   // NOLINT(*-magic-numbers)
        {0.85, "#662811"},  // NOLINT(*-magic-numbers)
        {0.9, "#57210E"},   // NOLINT(*-magic-numbers)
        {0.95, "#481B0A"},  // NOLINT(*-magic-numbers)
        {1.0, "#3A1507"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> autumn() {
    return {
        {0.0, "#F4E05E"},   // NOLINT(*-magic-numbers)
        {0.05, "#F5CF4D"},  // NOLINT(*-magic-numbers)
        {0.1, "#F5BE3F"},   // NOLINT(*-magic-numbers)
        {0.15, "#F2AD36"},  // NOLINT(*-magic-numbers)
        {0.2, "#EF9D32"},   // NOLINT(*-magic-numbers)
        {0.25, "#E98C33"},  // NOLINT(*-magic-numbers)
        {0.3, "#E27D35"},   // NOLINT(*-magic-numbers)
        {0.35, "#D77132"},  // NOLINT(*-magic-numbers)
        {0.4, "#CC6530"},   // NOLINT(*-magic-numbers)
        {0.45, "#C0592E"},  // NOLINT(*-magic-numbers)
        {0.5, "#B54D2D"},   // NOLINT(*-magic-numbers)
        {0.55, "#A9422B"},  // NOLINT(*-magic-numbers)
        {0.6, "#9B3928"},   // NOLINT(*-magic-numbers)
        {0.65, "#8C3125"},  // NOLINT(*-magic-numbers)
        {0.7, "#7E2A22"},   // NOLINT(*-magic-numbers)
        {0.75, "#70241E"},  // NOLINT(*-magic-numbers)
        {0.8, "#621D1A"},   // NOLINT(*-magic-numbers)
        {0.85, "#541715"},  // NOLINT(*-magic-numbers)
        {0.9, "#470F16"},   // NOLINT(*-magic-numbers)
        {0.95, "#3A0916"},  // NOLINT(*-magic-numbers)
        {1.0, "#2D0415"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> autumn_full() {
    return {
        {0.0, "#FFFFFF"},   // NOLINT(*-magic-numbers)
        {0.05, "#F7F3BF"},  // NOLINT(*-magic-numbers)
        {0.1, "#F4E473"},   // NOLINT(*-magic-numbers)
        {0.15, "#F5CF4D"},  // NOLINT(*-magic-numbers)
        {0.2, "#F4B93C"},   // NOLINT(*-magic-numbers)
        {0.25, "#F0A433"},  // NOLINT(*-magic-numbers)
        {0.3, "#EA8F32"},   // NOLINT(*-magic-numbers)
        {0.35, "#E07B34"},  // NOLINT(*-magic-numbers)
        {0.4, "#D16B31"},   // NOLINT(*-magic-numbers)
        {0.45, "#C25A2E"},  // NOLINT(*-magic-numbers)
        {0.5, "#B24B2C"},   // NOLINT(*-magic-numbers)
        {0.55, "#A13C2A"},  // NOLINT(*-magic-numbers)
        {0.6, "#8F3326"},   // NOLINT(*-magic-numbers)
        {0.65, "#7D2A22"},  // NOLINT(*-magic-numbers)
        {0.7, "#6C221D"},   // NOLINT(*-magic-numbers)
        {0.75, "#5B1A18"},  // NOLINT(*-magic-numbers)
        {0.8, "#4A1116"},   // NOLINT(*-magic-numbers)
        {0.85, "#3A0816"},  // NOLINT(*-magic-numbers)
        {0.9, "#290412"},   // NOLINT(*-magic-numbers)
        {0.95, "#170309"},  // NOLINT(*-magic-numbers)
        {1.0, "#070203"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> green() {
    return {
        {0.0, "#DBE699"},   // NOLINT(*-magic-numbers)
        {0.05, "#CDDC88"},  // NOLINT(*-magic-numbers)
        {0.1, "#BFD278"},   // NOLINT(*-magic-numbers)
        {0.15, "#B0C868"},  // NOLINT(*-magic-numbers)
        {0.2, "#A2BF57"},   // NOLINT(*-magic-numbers)
        {0.25, "#92B546"},  // NOLINT(*-magic-numbers)
        {0.3, "#83AC39"},   // NOLINT(*-magic-numbers)
        {0.35, "#72A237"},  // NOLINT(*-magic-numbers)
        {0.4, "#629835"},   // NOLINT(*-magic-numbers)
        {0.45, "#528E33"},  // NOLINT(*-magic-numbers)
        {0.5, "#428431"},   // NOLINT(*-magic-numbers)
        {0.55, "#327A2E"},  // NOLINT(*-magic-numbers)
        {0.6, "#236F30"},   // NOLINT(*-magic-numbers)
        {0.65, "#196431"},  // NOLINT(*-magic-numbers)
        {0.7, "#135931"},   // NOLINT(*-magic-numbers)
        {0.75, "#0F4D30"},  // NOLINT(*-magic-numbers)
        {0.8, "#0F422D"},   // NOLINT(*-magic-numbers)
        {0.85, "#103728"},  // NOLINT(*-magic-numbers)
        {0.9, "#0B2D23"},   // NOLINT(*-magic-numbers)
        {0.95, "#07241D"},  // NOLINT(*-magic-numbers)
        {1.0, "#041A16"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> green_full() {
    return {
        {0.0, "#FFFFFF"},   // NOLINT(*-magic-numbers)
        {0.05, "#F1F4D1"},  // NOLINT(*-magic-numbers)
        {0.1, "#DFE9A3"},   // NOLINT(*-magic-numbers)
        {0.15, "#CDDC88"},  // NOLINT(*-magic-numbers)
        {0.2, "#BBCF73"},   // NOLINT(*-magic-numbers)
        {0.25, "#A8C35E"},  // NOLINT(*-magic-numbers)
        {0.3, "#94B648"},   // NOLINT(*-magic-numbers)
        {0.35, "#80AA39"},  // NOLINT(*-magic-numbers)
        {0.4, "#6B9D36"},   // NOLINT(*-magic-numbers)
        {0.45, "#579033"},  // NOLINT(*-magic-numbers)
        {0.5, "#428431"},   // NOLINT(*-magic-numbers)
        {0.55, "#2D772E"},  // NOLINT(*-magic-numbers)
        {0.6, "#1D6831"},   // NOLINT(*-magic-numbers)
        {0.65, "#135A32"},  // NOLINT(*-magic-numbers)
        {0.7, "#0F4C2F"},   // NOLINT(*-magic-numbers)
        {0.75, "#0F3D2B"},  // NOLINT(*-magic-numbers)
        {0.8, "#0C3025"},   // NOLINT(*-magic-numbers)
        {0.85, "#07241D"},  // NOLINT(*-magic-numbers)
        {0.9, "#041814"},   // NOLINT(*-magic-numbers)
        {0.95, "#020D0C"},  // NOLINT(*-magic-numbers)
        {1.0, "#010404"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> blue() {
    return {
        {0.0, "#95F4D7"},   // NOLINT(*-magic-numbers)
        {0.05, "#85E8D2"},  // NOLINT(*-magic-numbers)
        {0.1, "#75DDCD"},   // NOLINT(*-magic-numbers)
        {0.15, "#66D1C8"},  // NOLINT(*-magic-numbers)
        {0.2, "#58C5C2"},   // NOLINT(*-magic-numbers)
        {0.25, "#4AB9BD"},  // NOLINT(*-magic-numbers)
        {0.3, "#3DADB7"},   // NOLINT(*-magic-numbers)
        {0.35, "#30A2B1"},  // NOLINT(*-magic-numbers)
        {0.4, "#2496AA"},   // NOLINT(*-magic-numbers)
        {0.45, "#1989A4"},  // NOLINT(*-magic-numbers)
        {0.5, "#127D9D"},   // NOLINT(*-magic-numbers)
        {0.55, "#0F7196"},  // NOLINT(*-magic-numbers)
        {0.6, "#10658F"},   // NOLINT(*-magic-numbers)
        {0.65, "#135887"},  // NOLINT(*-magic-numbers)
        {0.7, "#164C7E"},   // NOLINT(*-magic-numbers)
        {0.75, "#174174"},  // NOLINT(*-magic-numbers)
        {0.8, "#17356B"},   // NOLINT(*-magic-numbers)
        {0.85, "#162A61"},  // NOLINT(*-magic-numbers)
        {0.9, "#161F56"},   // NOLINT(*-magic-numbers)
        {0.95, "#14144C"},  // NOLINT(*-magic-numbers)
        {1.0, "#120841"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> blue_full() {
    return {
        {0.0, "#FFFFFF"},   // NOLINT(*-magic-numbers)
        {0.05, "#D5FAEA"},  // NOLINT(*-magic-numbers)
        {0.1, "#A2F5DA"},   // NOLINT(*-magic-numbers)
        {0.15, "#84E8D2"},  // NOLINT(*-magic-numbers)
        {0.2, "#71D9CC"},   // NOLINT(*-magic-numbers)
        {0.25, "#5ECAC5"},  // NOLINT(*-magic-numbers)
        {0.3, "#4CBBBD"},   // NOLINT(*-magic-numbers)
        {0.35, "#3BACB6"},  // NOLINT(*-magic-numbers)
        {0.4, "#2A9CAE"},   // NOLINT(*-magic-numbers)
        {0.45, "#1B8DA5"},  // NOLINT(*-magic-numbers)
        {0.5, "#127D9D"},   // NOLINT(*-magic-numbers)
        {0.55, "#0F6D94"},  // NOLINT(*-magic-numbers)
        {0.6, "#125D8A"},   // NOLINT(*-magic-numbers)
        {0.65, "#164E7F"},  // NOLINT(*-magic-numbers)
        {0.7, "#1A3F70"},   // NOLINT(*-magic-numbers)
        {0.75, "#1C325F"},  // NOLINT(*-magic-numbers)
        {0.8, "#1A254E"},   // NOLINT(*-magic-numbers)
        {0.85, "#161A3D"},  // NOLINT(*-magic-numbers)
        {0.9, "#110F2C"},   // NOLINT(*-magic-numbers)
        {0.95, "#0A061D"},  // NOLINT(*-magic-numbers)
        {1.0, "#04010E"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> purple_green_yellow() {
    return {
        {0.0, "#56157A"},   // NOLINT(*-magic-numbers)
        {0.05, "#512788"},  // NOLINT(*-magic-numbers)
        {0.1, "#4B3793"},   // NOLINT(*-magic-numbers)
        {0.15, "#43459B"},  // NOLINT(*-magic-numbers)
        {0.2, "#3A53A1"},   // NOLINT(*-magic-numbers)
        {0.25, "#2F60A4"},  // NOLINT(*-magic-numbers)
        {0.3, "#246CA6"},   // NOLINT(*-magic-numbers)
        {0.35, "#1D78A5"},  // NOLINT(*-magic-numbers)
        {0.4, "#1E82A4"},   // NOLINT(*-magic-numbers)
        {0.45, "#198DA4"},  // NOLINT(*-magic-numbers)
        {0.5, "#1D97A3"},   // NOLINT(*-magic-numbers)
        {0.55, "#2BA1A0"},  // NOLINT(*-magic-numbers)
        {0.6, "#3CAA9D"},   // NOLINT(*-magic-numbers)
        {0.65, "#47B398"},  // NOLINT(*-magic-numbers)
        {0.7, "#57BC92"},   // NOLINT(*-magic-numbers)
        {0.75, "#6CC488"},  // NOLINT(*-magic-numbers)
        {0.8, "#83CB7D"},   // NOLINT(*-magic-numbers)
        {0.85, "#9DD171"},  // NOLINT(*-magic-numbers)
        {0.9, "#B8D563"},   // NOLINT(*-magic-numbers)
        {0.95, "#D3D855"},  // NOLINT(*-magic-numbers)
        {1.0, "#EFDA48"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> blue_purple_red() {
    return {
        {0.0, "#297AF5"},   // NOLINT(*-magic-numbers)
        {0.05, "#4475F6"},  // NOLINT(*-magic-numbers)
        {0.1, "#5770F5"},   // NOLINT(*-magic-numbers)
        {0.15, "#676CF4"},  // NOLINT(*-magic-numbers)
        {0.2, "#7467F1"},   // NOLINT(*-magic-numbers)
        {0.25, "#8163ED"},  // NOLINT(*-magic-numbers)
        {0.3, "#8C5EE8"},   // NOLINT(*-magic-numbers)
        {0.35, "#965AE2"},  // NOLINT(*-magic-numbers)
        {0.4, "#9F56DB"},   // NOLINT(*-magic-numbers)
        {0.45, "#A852D3"},  // NOLINT(*-magic-numbers)
        {0.5, "#B04ECB"},   // NOLINT(*-magic-numbers)
        {0.55, "#B84AC1"},  // NOLINT(*-magic-numbers)
        {0.6, "#BF47B7"},   // NOLINT(*-magic-numbers)
        {0.65, "#C543AC"},  // NOLINT(*-magic-numbers)
        {0.7, "#CB40A0"},   // NOLINT(*-magic-numbers)
        {0.75, "#CF3D94"},  // NOLINT(*-magic-numbers)
        {0.8, "#D43B88"},   // NOLINT(*-magic-numbers)
        {0.85, "#D7397B"},  // NOLINT(*-magic-numbers)
        {0.9, "#DA386D"},   // NOLINT(*-magic-numbers)
        {0.95, "#DC3860"},  // NOLINT(*-magic-numbers)
        {1.0, "#DE3951"},   // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> blue_green_red() {
    return {
        {0.0, "#454ED2"},    // NOLINT(*-magic-numbers)
        {0.025, "#3E62DB"},  // NOLINT(*-magic-numbers)
        {0.05, "#3674E3"},   // NOLINT(*-magic-numbers)
        {0.075, "#2F86E9"},  // NOLINT(*-magic-numbers)
        {0.1, "#2B97EE"},    // NOLINT(*-magic-numbers)
        {0.125, "#1FA5F2"},  // NOLINT(*-magic-numbers)
        {0.15, "#14B1F4"},   // NOLINT(*-magic-numbers)
        {0.175, "#13BEF6"},  // NOLINT(*-magic-numbers)
        {0.2, "#1FCAF7"},    // NOLINT(*-magic-numbers)
        {0.225, "#1DD1F4"},  // NOLINT(*-magic-numbers)
        {0.25, "#24D8F0"},   // NOLINT(*-magic-numbers)
        {0.275, "#30DEEC"},  // NOLINT(*-magic-numbers)
        {0.3, "#40E4E7"},    // NOLINT(*-magic-numbers)
        {0.325, "#3EE6DE"},  // NOLINT(*-magic-numbers)
        {0.35, "#40E7D5"},   // NOLINT(*-magic-numbers)
        {0.375, "#47E7CA"},  // NOLINT(*-magic-numbers)
        {0.4, "#51E8BF"},    // NOLINT(*-magic-numbers)
        {0.425, "#4BEAB1"},  // NOLINT(*-magic-numbers)
        {0.45, "#4CEBA0"},   // NOLINT(*-magic-numbers)
        {0.475, "#55EC8C"},  // NOLINT(*-magic-numbers)
        {0.5, "#64EC74"},    // NOLINT(*-magic-numbers)
        {0.525, "#80E665"},  // NOLINT(*-magic-numbers)
        {0.55, "#96E057"},   // NOLINT(*-magic-numbers)
        {0.575, "#A8DA4B"},  // NOLINT(*-magic-numbers)
        {0.6, "#B6D341"},    // NOLINT(*-magic-numbers)
        {0.625, "#C2CD38"},  // NOLINT(*-magic-numbers)
        {0.65, "#CCC732"},   // NOLINT(*-magic-numbers)
        {0.675, "#D5C130"},  // NOLINT(*-magic-numbers)
        {0.7, "#DDBC32"},    // NOLINT(*-magic-numbers)
        {0.725, "#E1B32B"},  // NOLINT(*-magic-numbers)
        {0.75, "#E5AB27"},   // NOLINT(*-magic-numbers)
        {0.775, "#E8A227"},  // NOLINT(*-magic-numbers)
        {0.8, "#EA9A2B"},    // NOLINT(*-magic-numbers)
        {0.825, "#E98E2A"},  // NOLINT(*-magic-numbers)
        {0.85, "#E7832B"},   // NOLINT(*-magic-numbers)
        {0.875, "#E47730"},  // NOLINT(*-magic-numbers)
        {0.9, "#E06C35"},    // NOLINT(*-magic-numbers)
        {0.925, "#D55B36"},  // NOLINT(*-magic-numbers)
        {0.95, "#C94A38"},   // NOLINT(*-magic-numbers)
        {0.975, "#BC3A3A"},  // NOLINT(*-magic-numbers)
        {1.0, "#AF283D"},    // NOLINT(*-magic-numbers)
    };
}

std::vector<std::pair<double, std::string>> whole_hue() {
    return {
        {0.0, "#DA7E9B"},   // NOLINT(*-magic-numbers)
        {0.01, "#DB7E96"},  // NOLINT(*-magic-numbers)
        {0.02, "#DC7E91"},  // NOLINT(*-magic-numbers)
        {0.03, "#DD7E8C"},  // NOLINT(*-magic-numbers)
        {0.04, "#DE7E87"},  // NOLINT(*-magic-numbers)
        {0.05, "#DE7F82"},  // NOLINT(*-magic-numbers)
        {0.06, "#DE7F7D"},  // NOLINT(*-magic-numbers)
        {0.07, "#DE8078"},  // NOLINT(*-magic-numbers)
        {0.08, "#DE8174"},  // NOLINT(*-magic-numbers)
        {0.09, "#DE826F"},  // NOLINT(*-magic-numbers)
        {0.1, "#DD836A"},   // NOLINT(*-magic-numbers)
        {0.11, "#DC8465"},  // NOLINT(*-magic-numbers)
        {0.12, "#DB8561"},  // NOLINT(*-magic-numbers)
        {0.13, "#DA865C"},  // NOLINT(*-magic-numbers)
        {0.14, "#D98858"},  // NOLINT(*-magic-numbers)
        {0.15, "#D78953"},  // NOLINT(*-magic-numbers)
        {0.16, "#D58B4F"},  // NOLINT(*-magic-numbers)
        {0.17, "#D38C4C"},  // NOLINT(*-magic-numbers)
        {0.18, "#D18E48"},  // NOLINT(*-magic-numbers)
        {0.19, "#CE9045"},  // NOLINT(*-magic-numbers)
        {0.2, "#CB9142"},   // NOLINT(*-magic-numbers)
        {0.21, "#C99340"},  // NOLINT(*-magic-numbers)
        {0.22, "#C5953E"},  // NOLINT(*-magic-numbers)
        {0.23, "#C2973D"},  // NOLINT(*-magic-numbers)
        {0.24, "#BF993C"},  // NOLINT(*-magic-numbers)
        {0.25, "#BB9B3C"},  // NOLINT(*-magic-numbers)
        {0.26, "#B79D3C"},  // NOLINT(*-magic-numbers)
        {0.27, "#B39E3E"},  // NOLINT(*-magic-numbers)
        {0.28, "#AFA03F"},  // NOLINT(*-magic-numbers)
        {0.29, "#AAA241"},  // NOLINT(*-magic-numbers)
        {0.3, "#A6A444"},   // NOLINT(*-magic-numbers)
        {0.31, "#A1A547"},  // NOLINT(*-magic-numbers)
        {0.32, "#9CA74A"},  // NOLINT(*-magic-numbers)
        {0.33, "#97A94E"},  // NOLINT(*-magic-numbers)
        {0.34, "#92AA52"},  // NOLINT(*-magic-numbers)
        {0.35, "#8CAB56"},  // NOLINT(*-magic-numbers)
        {0.36, "#87AD5B"},  // NOLINT(*-magic-numbers)
        {0.37, "#81AE60"},  // NOLINT(*-magic-numbers)
        {0.38, "#7BAF64"},  // NOLINT(*-magic-numbers)
        {0.39, "#75B069"},  // NOLINT(*-magic-numbers)
        {0.4, "#6FB16E"},   // NOLINT(*-magic-numbers)
        {0.41, "#69B273"},  // NOLINT(*-magic-numbers)
        {0.42, "#62B378"},  // NOLINT(*-magic-numbers)
        {0.43, "#5CB47D"},  // NOLINT(*-magic-numbers)
        {0.44, "#55B583"},  // NOLINT(*-magic-numbers)
        {0.45, "#4EB588"},  // NOLINT(*-magic-numbers)
        {0.46, "#47B58D"},  // NOLINT(*-magic-numbers)
        {0.47, "#40B692"},  // NOLINT(*-magic-numbers)
        {0.48, "#39B697"},  // NOLINT(*-magic-numbers)
        {0.49, "#31B69C"},  // NOLINT(*-magic-numbers)
        {0.5, "#2AB6A1"},   // NOLINT(*-magic-numbers)
        {0.51, "#23B6A6"},  // NOLINT(*-magic-numbers)
        {0.52, "#1BB6AB"},  // NOLINT(*-magic-numbers)
        {0.53, "#14B5B0"},  // NOLINT(*-magic-numbers)
        {0.54, "#0EB5B4"},  // NOLINT(*-magic-numbers)
        {0.55, "#0AB4B9"},  // NOLINT(*-magic-numbers)
        {0.56, "#0AB4BD"},  // NOLINT(*-magic-numbers)
        {0.57, "#0EB3C1"},  // NOLINT(*-magic-numbers)
        {0.58, "#14B2C5"},  // NOLINT(*-magic-numbers)
        {0.59, "#1BB1C9"},  // NOLINT(*-magic-numbers)
        {0.6, "#22B0CD"},   // NOLINT(*-magic-numbers)
        {0.61, "#29AFD0"},  // NOLINT(*-magic-numbers)
        {0.62, "#31AED4"},  // NOLINT(*-magic-numbers)
        {0.63, "#38ADD7"},  // NOLINT(*-magic-numbers)
        {0.64, "#3FABDA"},  // NOLINT(*-magic-numbers)
        {0.65, "#45AADC"},  // NOLINT(*-magic-numbers)
        {0.66, "#4CA8DF"},  // NOLINT(*-magic-numbers)
        {0.67, "#53A7E1"},  // NOLINT(*-magic-numbers)
        {0.68, "#59A5E3"},  // NOLINT(*-magic-numbers)
        {0.69, "#5FA4E4"},  // NOLINT(*-magic-numbers)
        {0.7, "#65A2E6"},   // NOLINT(*-magic-numbers)
        {0.71, "#6BA1E7"},  // NOLINT(*-magic-numbers)
        {0.72, "#719FE7"},  // NOLINT(*-magic-numbers)
        {0.73, "#779DE8"},  // NOLINT(*-magic-numbers)
        {0.74, "#7C9CE8"},  // NOLINT(*-magic-numbers)
        {0.75, "#829AE8"},  // NOLINT(*-magic-numbers)
        {0.76, "#8798E8"},  // NOLINT(*-magic-numbers)
        {0.77, "#8C97E7"},  // NOLINT(*-magic-numbers)
        {0.78, "#9195E6"},  // NOLINT(*-magic-numbers)
        {0.79, "#9694E5"},  // NOLINT(*-magic-numbers)
        {0.8, "#9B92E3"},   // NOLINT(*-magic-numbers)
        {0.81, "#A090E2"},  // NOLINT(*-magic-numbers)
        {0.82, "#A48FE0"},  // NOLINT(*-magic-numbers)
        {0.83, "#A88DDE"},  // NOLINT(*-magic-numbers)
        {0.84, "#AD8CDB"},  // NOLINT(*-magic-numbers)
        {0.85, "#B18BD8"},  // NOLINT(*-magic-numbers)
        {0.86, "#B489D5"},  // NOLINT(*-magic-numbers)
        {0.87, "#B888D2"},  // NOLINT(*-magic-numbers)
        {0.88, "#BC87CF"},  // NOLINT(*-magic-numbers)
        {0.89, "#BF85CB"},  // NOLINT(*-magic-numbers)
        {0.9, "#C384C8"},   // NOLINT(*-magic-numbers)
        {0.91, "#C683C4"},  // NOLINT(*-magic-numbers)
        {0.92, "#C982C0"},  // NOLINT(*-magic-numbers)
        {0.93, "#CB81BC"},  // NOLINT(*-magic-numbers)
        {0.94, "#CE81B7"},  // NOLINT(*-magic-numbers)
        {0.95, "#D080B3"},  // NOLINT(*-magic-numbers)
        {0.96, "#D37FAE"},  // NOLINT(*-magic-numbers)
        {0.97, "#D57FAA"},  // NOLINT(*-magic-numbers)
        {0.98, "#D67EA5"},  // NOLINT(*-magic-numbers)
        {0.99, "#D87EA0"},  // NOLINT(*-magic-numbers)
        {1.0, "#DA7E9B"},   // NOLINT(*-magic-numbers)
    };
}

}  // namespace plotly_plotter::color_scales
